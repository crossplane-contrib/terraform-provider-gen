package v1alpha1

func Index() string {
	return "/*\nCopyright 2019 The Crossplane Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage v1alpha1\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\txpv1 \"github.com/crossplane/crossplane-runtime/apis/common/v1\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"reflect\"\n\n\t\"github.com/crossplane-contrib/terraform-runtime/pkg/client\"\n\t\"github.com/crossplane-contrib/terraform-runtime/pkg/plugin\"\n\t\"github.com/crossplane/crossplane-runtime/pkg/resource\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/zclconf/go-cty/cty\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"k8s.io/apimachinery/pkg/types\"\n\tkubeclient \"sigs.k8s.io/controller-runtime/pkg/client\"\n\t\"sigs.k8s.io/controller-runtime/pkg/scheme\"\n)\n\n// Package type metadata.\nconst (\n\tGroup                         = \"vsphere.terraform-plugin.crossplane.io\"\n\tVersion                       = \"v1alpha1\"\n\tProviderName                  = \"vsphere\"\n)\n\nvar (\n\t// SchemeGroupVersion is group version used to register these objects\n\tSchemeGroupVersion = schema.GroupVersion{Group: Group, Version: Version}\n\t// Provider type metadata.\n\tProviderKind             = reflect.TypeOf(ProviderConfig{}).Name()\n\tProviderGroupKind        = schema.GroupKind{Group: Group, Kind: ProviderKind}.String()\n\tProviderKindAPIVersion   = ProviderKind + \".\" + SchemeGroupVersion.String()\n\tProviderGroupVersionKind = SchemeGroupVersion.WithKind(ProviderKind)\n)\n\nfunc initializeProvider(ctx context.Context, mr resource.Managed, ropts *client.RuntimeOptions, kube kubeclient.Client) (*client.Provider, error) {\n\tpc := &ProviderConfig{}\n\tif err := kube.Get(ctx, types.NamespacedName{Name: mr.GetProviderConfigReference().Name}, pc); err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot get referenced Provider\")\n\t}\n\n\tt := resource.NewProviderConfigUsageTracker(kube, &ProviderConfigUsage{})\n\tif err := t.Track(ctx, mr); err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot track ProviderConfig usage\")\n\t}\n\n\tpass, err := readPassword(ctx, kube, pc)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"cannot read credentials for ProviderConfig\")\n\t}\n\tcfg := populateConfig(pc, pass)\n\n\tp, err := client.NewProvider(ProviderName, ropts.PluginPath)\n\tif err != nil {\n\t\treturn p, err\n\t}\n\terr = p.Configure(cfg)\n\treturn p, err\n}\n\nfunc populateConfig(p *ProviderConfig, password string) cty.Value {\n\tmerged := make(map[string]cty.Value)\n\tmerged[\"api_timeout\"] = cty.NumberIntVal(p.Spec.ApiTimeout)\n\tmerged[\"rest_session_path\"] = cty.StringVal(p.Spec.RestSessionPath)\n\tmerged[\"vcenter_server\"] = cty.StringVal(p.Spec.VcenterServer)\n\tmerged[\"vim_keep_alive\"] = cty.NumberIntVal(p.Spec.VimKeepAlive)\n\tmerged[\"allow_unverified_ssl\"] = cty.BoolVal(p.Spec.AllowUnverifiedSsl)\n\tmerged[\"client_debug\"] = cty.BoolVal(p.Spec.ClientDebug)\n\tmerged[\"client_debug_path\"] = cty.StringVal(p.Spec.ClientDebugPath)\n\tmerged[\"client_debug_path_run\"] = cty.StringVal(p.Spec.ClientDebugPathRun)\n\tmerged[\"persist_session\"] = cty.BoolVal(p.Spec.PersistSession)\n\tmerged[\"vim_session_path\"] = cty.StringVal(p.Spec.VimSessionPath)\n\tmerged[\"vsphere_server\"] = cty.StringVal(p.Spec.VsphereServer)\n\tmerged[\"user\"] = cty.StringVal(p.Spec.User)\n\n\tmerged[\"password\"] = cty.StringVal(password)\n\treturn cty.ObjectVal(merged)\n}\n\nfunc GetProviderInit() *plugin.ProviderInit {\n\tschemeBuilder := &scheme.Builder{GroupVersion: SchemeGroupVersion}\n\tschemeBuilder.Register(&ProviderConfig{}, &ProviderConfigList{})\n\tschemeBuilder.Register(&ProviderConfigUsage{}, &ProviderConfigUsageList{})\n\treturn &plugin.ProviderInit{\n\t\tSchemeBuilder: schemeBuilder,\n\t\tInitializer:   initializeProvider,\n\t}\n}\n\nfunc readPassword(ctx context.Context, kube kubeclient.Client, pc *ProviderConfig) (string, error) {\n\tif s := pc.Spec.Credentials.Source; s != xpv1.CredentialsSourceSecret {\n\t\treturn \"\", errors.Errorf(\"unsupported credentials source %q\", s)\n\t}\n\tref := pc.Spec.Credentials.SecretRef\n\tif ref == nil {\n\t\treturn \"\", errors.New(\"no credentials secret reference was provided\")\n\t}\n\tif ref.Key == \"\" {\n\t\treturn \"\", fmt.Errorf(\"secret reference 'Key' field must be specified for ProviderConfig %s\", pc.Name)\n\t}\n\n\ts := &corev1.Secret{}\n\tif err := kube.Get(ctx, types.NamespacedName{Name: ref.Name, Namespace: ref.Namespace}, s); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tpassword, ok := s.Data[ref.Key]\n\tif !ok || len(password) == 0 {\n\t\treturn \"\", fmt.Errorf(\"Cannot read value from password key (%s) of secret at %s.%s\", ref.Key, ref.Namespace, ref.Name)\n\t}\n\n\treturn string(password), nil\n}\n"
}
