package v1alpha1

func Types() string {
	return "/*\nCopyright 2020 The Crossplane Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage v1alpha1\n\nimport (\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\n\txpv1 \"github.com/crossplane/crossplane-runtime/apis/common/v1\"\n)\n\n\n// TODO: generate this -- currently hardcoded for vsphere, which should move to an overlay until we have generation\n// support for ProviderConfigs\n\n// A ProviderConfigSpec defines the desired state of a ProviderConfig.\ntype ProviderConfigSpec struct {\n\txpv1.ProviderConfigSpec `json:\",inline\"`\n\tApiTimeout int64 `json:\"api_timeout,omitempty\"`\n\tRestSessionPath string `json:\"rest_session_path,omitempty\"`\n\tVcenterServer string `json:\"vcenter_server,omitempty\"`\n\tVimKeepAlive int64 `json:\"vim_keep_alive,omitempty\"`\n\tAllowUnverifiedSsl bool `json:\"allow_unverified_ssl,omitempty\"`\n\tClientDebug bool `json:\"client_debug,omitempty\"`\n\tClientDebugPath string `json:\"client_debug_path,omitempty\"`\n\tClientDebugPathRun string `json:\"client_debug_path_run,omitempty\"`\n\t// +kubebuilder:validation:Required\n\tPassword string `json:\"password\"`\n\tPersistSession bool `json:\"persist_session,omitempty\"`\n\t// +kubebuilder:validation:Required\n\tUser string `json:\"user\"`\n\tVimSessionPath string `json:\"vim_session_path,omitempty\"`\n\tVsphereServer string `json:\"vsphere_server,omitempty\"`\n}\n\n// A ProviderConfigStatus represents the status of a ProviderConfig.\ntype ProviderConfigStatus struct {\n\txpv1.ProviderConfigStatus `json:\",inline\"`\n}\n\n// +kubebuilder:object:root=true\n\n// A ProviderConfig configures how controllers will connect to a provider's API.\n// +kubebuilder:printcolumn:name=\"AGE\",type=\"date\",JSONPath=\".metadata.creationTimestamp\"\n// +kubebuilder:printcolumn:name=\"SECRET-NAME\",type=\"string\",JSONPath=\".spec.credentialsSecretRef.name\",priority=1\n// +kubebuilder:resource:scope=Cluster,categories={crossplane,provider,{{ .Name }}}\n// +kubebuilder:subresource:status\ntype ProviderConfig struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   ProviderConfigSpec   `json:\"spec\"`\n\tStatus ProviderConfigStatus `json:\"status,omitempty\"`\n}\n\n// +kubebuilder:object:root=true\n\n// ProviderConfigList contains a list of ProviderConfig\ntype ProviderConfigList struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\tmetav1.ListMeta `json:\"metadata,omitempty\"`\n\tItems           []ProviderConfig `json:\"items\"`\n}\n\n// +kubebuilder:object:root=true\n\n// A ProviderConfigUsage indicates that a resource is using a ProviderConfig.\n// +kubebuilder:printcolumn:name=\"AGE\",type=\"date\",JSONPath=\".metadata.creationTimestamp\"\n// +kubebuilder:printcolumn:name=\"CONFIG-NAME\",type=\"string\",JSONPath=\".providerConfigRef.name\"\n// +kubebuilder:printcolumn:name=\"RESOURCE-KIND\",type=\"string\",JSONPath=\".resourceRef.kind\"\n// +kubebuilder:printcolumn:name=\"RESOURCE-NAME\",type=\"string\",JSONPath=\".resourceRef.name\"\n// +kubebuilder:resource:scope=Cluster,categories={crossplane,provider,{{ .Name }}}\ntype ProviderConfigUsage struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\txpv1.ProviderConfigUsage `json:\",inline\"`\n}\n\n// +kubebuilder:object:root=true\n\n// ProviderConfigUsageList contains a list of ProviderConfigUsage\ntype ProviderConfigUsageList struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\tmetav1.ListMeta `json:\"metadata,omitempty\"`\n\tItems           []ProviderConfigUsage `json:\"items\"`\n}\n"
}
