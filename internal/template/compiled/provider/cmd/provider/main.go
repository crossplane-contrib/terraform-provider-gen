package provider

func Main() string {
	return "/*\nCopyright 2020 The Crossplane Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage main\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"gopkg.in/alecthomas/kingpin.v2\"\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\t\"sigs.k8s.io/controller-runtime/pkg/log/zap\"\n\n\t\"{{ .RootPackage }}/generated\"\n\t\"github.com/crossplane-contrib/terraform-runtime/pkg/client\"\n\t\"github.com/crossplane/crossplane-runtime/pkg/logging\"\n\n\t\"github.com/crossplane-contrib/terraform-runtime/pkg/controller\"\n)\n\nfunc main() {\n\tvar (\n\t\tapp        = kingpin.New(filepath.Base(os.Args[0]), \"Template support for Crossplane.\").DefaultEnvars()\n\t\tdebug      = app.Flag(\"debug\", \"Run with debug logging.\").Short('d').Bool()\n\t\tsyncPeriod = app.Flag(\"sync\", \"Controller manager sync period such as 300ms, 1.5h, or 2h45m\").Short('s').Default(\"1h\").Duration()\n\t\t// TODO: pluginPath should receive a default pointing to a canonical path in a container generated by the build process\n\t\tpluginPath = app.Flag(\"pluginPath\", \"Full path to directory where terraform plugin is located.\").String()\n\t)\n\tkingpin.MustParse(app.Parse(os.Args[1:]))\n\n\tzl := zap.New(zap.UseDevMode(*debug))\n\tlog := logging.NewLogrLogger(zl.WithName(\"terraform-runtime\"))\n\tif *debug {\n\t\t// The controller-runtime runs with a no-op logger by default. It is\n\t\t// *very* verbose even at info level, so we only provide it a real\n\t\t// logger when we're running in debug mode.\n\t\tctrl.SetLogger(zl)\n\t}\n\n\tproviderInit := generated.ProviderInit()\n\tidx, err := generated.Index()\n\tif err != nil {\n\t\tkingpin.FatalIfError(err, \"Failed to build index of generated code (generated.Index())\")\n\t}\n\n\topts := ctrl.Options{SyncPeriod: syncPeriod}\n\tropts := client.NewRuntimeOptions().\n\t\tWithPluginPath(*pluginPath).\n\t\tWithPoolSize(5)\n\tlog.Debug(\"Starting\", \"sync-period\", syncPeriod.String())\n\n\terr = controller.StartTerraformManager(idx, providerInit, opts, ropts, log)\n\tkingpin.FatalIfError(err, \"Cannot start the generated terraform controllers\")\n}\n"
}
